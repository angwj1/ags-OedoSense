"""
Create a software (with web interface) named "AGS OedoSense" to:
- Read oedometer test data in MS excel files (in AGS format)
- Check data format
- Plot oedometer test data
- Calculate the Preconsolidation Pressure with Three Methods: 1. Casagrande Method, 2. Maximum Curvature Method (Gregory et al.), 3. Oikawa Method
- Compare the calculated preconsolidation pressure against the recorded preconsolidation pressure (in AGS)

Instructions to use software:
0. Access the streamlit web interface 
1. Select the MS excel files
2. Adjust the settings as necessary 
3. Check the data format (only available for AGS Format mode)
4. Generate graphs and calculate preconsolidation pressure
5. Download the graphs and summary excel files (i.e. the results generated by the application)

# code by Ang Wei Jian
# 9 Jan 2025
"""

import streamlit as st
from check_format import check_AGS_file_format
import pandas as pd
import main
import zipfile

ss = st.session_state
st.set_page_config(layout='wide')
if "has_format_errors" not in ss:
    ss["has_format_errors"] = True

# link up streamlit and css
cssfile_path = "styles.css"
with open(cssfile_path) as css:
    st.markdown(f"<style>{css.read()}</style>", unsafe_allow_html=True)

# sidebar
with st.sidebar:
    st.divider()
    st.write("## About AGS OedoSense")
    st.write("Version 2.0") 
    st.write("""AGS OedoSense makes sense of oedometer data in AGS files. It reads oedometer test data directly from MS Excel files in AGS format, checks the data format and determines the preconsolidation pressure with three methods: \n1. Casagrande's Method (1936) \n2. Maximum Curvature Method (Gregory et al., 2006) \n3. Oikawa's Method (1987)\n""")
    st.write("Built by Ang Wei Jian, 2025.") 
    st.write("Source code can be found [here](https://github.com/angwj1/ags-OedoSense).", unsafe_allow_html=True)
    st.divider()

# Main Page
st.markdown('<p class="main-header-text">AGS OedoSense</p>', unsafe_allow_html=True)

# Instructions
with st.expander("See Instructions"):
    st.write(f'''
            1. Select the MS excel files
            2. Adjust the settings as necessary  
            3. Check the data format (only available for AGS Format mode)
            4. Generate graphs and calculate preconsolidation pressure
            5. Download the graphs and summary excel files (i.e. the results generated by the application)
            ''')

ags_files = st.file_uploader(
    "Select one or more MS excel file(s)", 
    type=['xls', 'xlsx', 'xlsm'], 
    accept_multiple_files=True
    )

mode = st.radio(
    "Select mode",
    ["AGS Format", "Manual Entry"],
    )

if mode == "AGS Format":
    ss["has_format_errors"] = True
elif (mode == "Manual Entry") and (ags_files==[]):    
    ss["has_format_errors"] = True
elif (mode == "Manual Entry") and (ags_files!=[]):
    ss["has_format_errors"] = False

col1, col2, col3 = st.columns(3)
with col1:
    calculate_pc = st.checkbox("Calculate Preconsolidation Pressure?", True)
    troubleshoot_mode = st.checkbox("Superimpose Gradient and Curvature Plots?")
with col2:
    error_tolerance = st.slider("Error Tolerance (%):", 0, 300, 50)
with col3:
    pass

print_options = st.multiselect(
"Print Graphs for:",
["Casagrande's Method (1936)", "Maximum Curvature Method (Gregory et al., 2006)", "Oikawa's Method (1987)"],
["Casagrande's Method (1936)"],
)

if st.button("Check AGS File Format"):
    with st.spinner('Checking now...'):
        if ags_files==[]:        
            st.error("Please select one or more MS excel file(s).", icon="üö®")
        elif mode == "AGS Format":
            ### Error 1a:
            # AGS files does not contain OED data (i.e. exact sheetname "CONG - AGS" and "CONS - AGS") --> error_files_1a
            ### Error 1b:
            # Mismatch in number of tests recorded between "CONG - AGS" and "CONS - AGS" --> error_files_1b
            ### Error 1c 
            # A numeric value (i.e. void ratio and stress) is incorrectly recorded. --> error_files_1c_void && error_files_1c_stress
            ### Error 1d:
            # A numeric value (i.e.preconsolidation pressure, pc) is incorrectly recorded. --> error_files_1d
            error_files_1a, error_files_1b, error_files_1c_void, error_files_1c_stress, error_files_1d = check_AGS_file_format(ags_files)

            AGS_error_text = "List of AGS Files with Errors: "

            if len(error_files_1a) > 0:
                processed_error_files_1a = "  \n*".join(error_files_1a)
                AGS_error_text = AGS_error_text + f'  \nHAIn the following {len(error_files_1a)} AGS file(s), OED data (i.e. exact sheetname "CONG - AGS" and "CONS - AGS") cannot be found :  \n*{processed_error_files_1a}'

            if len(error_files_1b) > 0:
                processed_error_files_1b = "  \n*".join(error_files_1b)
                AGS_error_text = AGS_error_text + f'  \nIn the following {len(error_files_1b)} AGS file(s), there is a mismatch in number of tests recorded between "CONG - AGS" and "CONS - AGS" :  \n*{processed_error_files_1b}'

            if len(error_files_1c_void) > 0:
                processed_error_files_1c_void = "  \n*".join(error_files_1c_void)
                AGS_error_text = AGS_error_text + f'  \nIn the following {len(error_files_1c_void)} Test ID(s), there are empty or non-numeric values in "void ratio" column :  \n*{processed_error_files_1c_void}'

            if len(error_files_1c_stress) > 0:
                processed_error_files_1c_stress = "  \n*".join(error_files_1c_stress)
                AGS_error_text = AGS_error_text + f'  \nIn the following {len(error_files_1c_stress)} Test ID(s), there are empty or non-numeric values in "stress" column :  \n*{processed_error_files_1c_stress}'

            if len(error_files_1d) > 0:
                processed_error_files_1d = "  \n*".join(error_files_1d)
                AGS_error_text = AGS_error_text + f'  \nIn the following {len(error_files_1d)} Test ID(s), there are empty or non-numeric values in "pre-consolidation pressure" column :  \n*{processed_error_files_1d}'

            if len(error_files_1a)+len(error_files_1b)+len(error_files_1c_void)+len(error_files_1c_stress)+len(error_files_1d) == 0:
                st.success("**No formatting errors in AGS Files. Please proceed.**", icon="‚úÖ")
                ss["has_format_errors"] = False
            else:
                st.write("**There are formatting errors in AGS Files. Please rectify files before proceeding.**")
                st.error(AGS_error_text, icon="üö®")
                print(AGS_error_text)

        elif mode == "Manual Entry":
            st.success('**File Format can only be checked for AGS Files. Please proceed.**', icon="‚úÖ")

if st.button("Generate Results", disabled=ss['has_format_errors']):
    with st.spinner('Generating now...'):
    
        if ags_files!=[]:
            if mode == "AGS Format":
                critical_list, hasError, zip_file = main.main(ags_files, error_tolerance, calculate_pc, print_options, troubleshoot_mode, excel_file_name_cleaned = 'cleaned_data_ags_mode.xlsx')
            elif mode == "Manual Entry":
                critical_list, hasError, zip_file = main.manual_mode(ags_files, error_tolerance, calculate_pc, print_options, troubleshoot_mode, excel_file_name_cleaned = 'cleaned_data_manual_mode.xlsx')

            if hasError==False:       
            # Display success message, list of critical tests that exceeded the error threshold & close window
                st.success('**Graphs & Summary Generated! Please download results**', icon="‚úÖ")
                # Create a download button
                st.download_button(
                    label="Download results",
                    data=zip_file,
                    file_name="results.zip",
                    mime="application/zip"
                )
                
                if calculate_pc: 
                    if len(critical_list) > 0:
                        processed_crit_list = "  \n*".join(critical_list)
                        st.info(f'  \nThe following {len(critical_list)} test(s) exceeded the error threshold of {error_tolerance}%:  \n*{processed_crit_list}', icon="‚ÑπÔ∏è")
                    elif len(critical_list) == 0:
                        st.info(f'  \nNo test exceeded the error threshold of {error_tolerance}%', icon="‚ÑπÔ∏è")
                        
                
